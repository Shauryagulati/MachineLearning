{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  />\n",
    "</center>\n",
    "\n",
    "<h1 align=center><font size = 5>Data Analysis with Python</font></h1>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# House Sales in King County, USA\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Variable      | Description                                                                                                 |\n",
    "| ------------- | ----------------------------------------------------------------------------------------------------------- |\n",
    "| id            | A notation for a house                                                                                      |\n",
    "| date          | Date house was sold                                                                                         |\n",
    "| price         | Price is prediction target                                                                                  |\n",
    "| bedrooms      | Number of bedrooms                                                                                          |\n",
    "| bathrooms     | Number of bathrooms                                                                                         |\n",
    "| sqft_living   | Square footage of the home                                                                                  |\n",
    "| sqft_lot      | Square footage of the lot                                                                                   |\n",
    "| floors        | Total floors (levels) in house                                                                              |\n",
    "| waterfront    | House which has a view to a waterfront                                                                      |\n",
    "| view          | Has been viewed                                                                                             |\n",
    "| condition     | How good the condition is overall                                                                           |\n",
    "| grade         | overall grade given to the housing unit, based on King County grading system                                |\n",
    "| sqft_above    | Square footage of house apart from basement                                                                 |\n",
    "| sqft_basement | Square footage of the basement                                                                              |\n",
    "| yr_built      | Built Year                                                                                                  |\n",
    "| yr_renovated  | Year when house was renovated                                                                               |\n",
    "| zipcode       | Zip code                                                                                                    |\n",
    "| lat           | Latitude coordinate                                                                                         |\n",
    "| long          | Longitude coordinate                                                                                        |\n",
    "| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n",
    "| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will require the following libraries:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler,PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 1: Importing Data Sets\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the csv:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "file_name='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'\n",
    "df=pd.read_csv(file_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the method <code>head</code> to display the first 5 columns of the dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>7129300520</td>\n",
       "      <td>20141013T000000</td>\n",
       "      <td>221900.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1180</td>\n",
       "      <td>5650</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1180</td>\n",
       "      <td>0</td>\n",
       "      <td>1955</td>\n",
       "      <td>0</td>\n",
       "      <td>98178</td>\n",
       "      <td>47.5112</td>\n",
       "      <td>-122.257</td>\n",
       "      <td>1340</td>\n",
       "      <td>5650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6414100192</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>538000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2570</td>\n",
       "      <td>7242</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2170</td>\n",
       "      <td>400</td>\n",
       "      <td>1951</td>\n",
       "      <td>1991</td>\n",
       "      <td>98125</td>\n",
       "      <td>47.7210</td>\n",
       "      <td>-122.319</td>\n",
       "      <td>1690</td>\n",
       "      <td>7639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>5631500400</td>\n",
       "      <td>20150225T000000</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>770</td>\n",
       "      <td>10000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>770</td>\n",
       "      <td>0</td>\n",
       "      <td>1933</td>\n",
       "      <td>0</td>\n",
       "      <td>98028</td>\n",
       "      <td>47.7379</td>\n",
       "      <td>-122.233</td>\n",
       "      <td>2720</td>\n",
       "      <td>8062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2487200875</td>\n",
       "      <td>20141209T000000</td>\n",
       "      <td>604000.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1960</td>\n",
       "      <td>5000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>1050</td>\n",
       "      <td>910</td>\n",
       "      <td>1965</td>\n",
       "      <td>0</td>\n",
       "      <td>98136</td>\n",
       "      <td>47.5208</td>\n",
       "      <td>-122.393</td>\n",
       "      <td>1360</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1954400510</td>\n",
       "      <td>20150218T000000</td>\n",
       "      <td>510000.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1680</td>\n",
       "      <td>8080</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1680</td>\n",
       "      <td>0</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>98074</td>\n",
       "      <td>47.6168</td>\n",
       "      <td>-122.045</td>\n",
       "      <td>1800</td>\n",
       "      <td>7503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n",
       "0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n",
       "1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n",
       "2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n",
       "3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n",
       "4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n",
       "\n",
       "   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n",
       "0         1180      5650     1.0           0  ...      7        1180   \n",
       "1         2570      7242     2.0           0  ...      7        2170   \n",
       "2          770     10000     1.0           0  ...      6         770   \n",
       "3         1960      5000     1.0           0  ...      7        1050   \n",
       "4         1680      8080     1.0           0  ...      8        1680   \n",
       "\n",
       "   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n",
       "0              0      1955             0    98178  47.5112 -122.257   \n",
       "1            400      1951          1991    98125  47.7210 -122.319   \n",
       "2              0      1933             0    98028  47.7379 -122.233   \n",
       "3            910      1965             0    98136  47.5208 -122.393   \n",
       "4              0      1987             0    98074  47.6168 -122.045   \n",
       "\n",
       "   sqft_living15  sqft_lot15  \n",
       "0           1340        5650  \n",
       "1           1690        7639  \n",
       "2           2720        8062  \n",
       "3           1360        5000  \n",
       "4           1800        7503  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1\n",
    "\n",
    "Display the data types of each column using the function dtypes, then take a screenshot and submit it, include your code in the image.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0         int64\n",
       "id                 int64\n",
       "date              object\n",
       "price            float64\n",
       "bedrooms         float64\n",
       "bathrooms        float64\n",
       "sqft_living        int64\n",
       "sqft_lot           int64\n",
       "floors           float64\n",
       "waterfront         int64\n",
       "view               int64\n",
       "condition          int64\n",
       "grade              int64\n",
       "sqft_above         int64\n",
       "sqft_basement      int64\n",
       "yr_built           int64\n",
       "yr_renovated       int64\n",
       "zipcode            int64\n",
       "lat              float64\n",
       "long             float64\n",
       "sqft_living15      int64\n",
       "sqft_lot15         int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the method describe to obtain a statistical summary of the dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>...</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>21613.00000</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21600.000000</td>\n",
       "      <td>21603.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>10806.00000</td>\n",
       "      <td>4.580302e+09</td>\n",
       "      <td>5.400881e+05</td>\n",
       "      <td>3.372870</td>\n",
       "      <td>2.115736</td>\n",
       "      <td>2079.899736</td>\n",
       "      <td>1.510697e+04</td>\n",
       "      <td>1.494309</td>\n",
       "      <td>0.007542</td>\n",
       "      <td>0.234303</td>\n",
       "      <td>...</td>\n",
       "      <td>7.656873</td>\n",
       "      <td>1788.390691</td>\n",
       "      <td>291.509045</td>\n",
       "      <td>1971.005136</td>\n",
       "      <td>84.402258</td>\n",
       "      <td>98077.939805</td>\n",
       "      <td>47.560053</td>\n",
       "      <td>-122.213896</td>\n",
       "      <td>1986.552492</td>\n",
       "      <td>12768.455652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6239.28002</td>\n",
       "      <td>2.876566e+09</td>\n",
       "      <td>3.671272e+05</td>\n",
       "      <td>0.926657</td>\n",
       "      <td>0.768996</td>\n",
       "      <td>918.440897</td>\n",
       "      <td>4.142051e+04</td>\n",
       "      <td>0.539989</td>\n",
       "      <td>0.086517</td>\n",
       "      <td>0.766318</td>\n",
       "      <td>...</td>\n",
       "      <td>1.175459</td>\n",
       "      <td>828.090978</td>\n",
       "      <td>442.575043</td>\n",
       "      <td>29.373411</td>\n",
       "      <td>401.679240</td>\n",
       "      <td>53.505026</td>\n",
       "      <td>0.138564</td>\n",
       "      <td>0.140828</td>\n",
       "      <td>685.391304</td>\n",
       "      <td>27304.179631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000102e+06</td>\n",
       "      <td>7.500000e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>5.200000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>47.155900</td>\n",
       "      <td>-122.519000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>651.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5403.00000</td>\n",
       "      <td>2.123049e+09</td>\n",
       "      <td>3.219500e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>1427.000000</td>\n",
       "      <td>5.040000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1190.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1951.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98033.000000</td>\n",
       "      <td>47.471000</td>\n",
       "      <td>-122.328000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>5100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>10806.00000</td>\n",
       "      <td>3.904930e+09</td>\n",
       "      <td>4.500000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>1910.000000</td>\n",
       "      <td>7.618000e+03</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1560.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1975.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98065.000000</td>\n",
       "      <td>47.571800</td>\n",
       "      <td>-122.230000</td>\n",
       "      <td>1840.000000</td>\n",
       "      <td>7620.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16209.00000</td>\n",
       "      <td>7.308900e+09</td>\n",
       "      <td>6.450000e+05</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2550.000000</td>\n",
       "      <td>1.068800e+04</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2210.000000</td>\n",
       "      <td>560.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98118.000000</td>\n",
       "      <td>47.678000</td>\n",
       "      <td>-122.125000</td>\n",
       "      <td>2360.000000</td>\n",
       "      <td>10083.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>21612.00000</td>\n",
       "      <td>9.900000e+09</td>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>13540.000000</td>\n",
       "      <td>1.651359e+06</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9410.000000</td>\n",
       "      <td>4820.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>98199.000000</td>\n",
       "      <td>47.777600</td>\n",
       "      <td>-121.315000</td>\n",
       "      <td>6210.000000</td>\n",
       "      <td>871200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0            id         price      bedrooms     bathrooms  \\\n",
       "count  21613.00000  2.161300e+04  2.161300e+04  21600.000000  21603.000000   \n",
       "mean   10806.00000  4.580302e+09  5.400881e+05      3.372870      2.115736   \n",
       "std     6239.28002  2.876566e+09  3.671272e+05      0.926657      0.768996   \n",
       "min        0.00000  1.000102e+06  7.500000e+04      1.000000      0.500000   \n",
       "25%     5403.00000  2.123049e+09  3.219500e+05      3.000000      1.750000   \n",
       "50%    10806.00000  3.904930e+09  4.500000e+05      3.000000      2.250000   \n",
       "75%    16209.00000  7.308900e+09  6.450000e+05      4.000000      2.500000   \n",
       "max    21612.00000  9.900000e+09  7.700000e+06     33.000000      8.000000   \n",
       "\n",
       "        sqft_living      sqft_lot        floors    waterfront          view  \\\n",
       "count  21613.000000  2.161300e+04  21613.000000  21613.000000  21613.000000   \n",
       "mean    2079.899736  1.510697e+04      1.494309      0.007542      0.234303   \n",
       "std      918.440897  4.142051e+04      0.539989      0.086517      0.766318   \n",
       "min      290.000000  5.200000e+02      1.000000      0.000000      0.000000   \n",
       "25%     1427.000000  5.040000e+03      1.000000      0.000000      0.000000   \n",
       "50%     1910.000000  7.618000e+03      1.500000      0.000000      0.000000   \n",
       "75%     2550.000000  1.068800e+04      2.000000      0.000000      0.000000   \n",
       "max    13540.000000  1.651359e+06      3.500000      1.000000      4.000000   \n",
       "\n",
       "       ...         grade    sqft_above  sqft_basement      yr_built  \\\n",
       "count  ...  21613.000000  21613.000000   21613.000000  21613.000000   \n",
       "mean   ...      7.656873   1788.390691     291.509045   1971.005136   \n",
       "std    ...      1.175459    828.090978     442.575043     29.373411   \n",
       "min    ...      1.000000    290.000000       0.000000   1900.000000   \n",
       "25%    ...      7.000000   1190.000000       0.000000   1951.000000   \n",
       "50%    ...      7.000000   1560.000000       0.000000   1975.000000   \n",
       "75%    ...      8.000000   2210.000000     560.000000   1997.000000   \n",
       "max    ...     13.000000   9410.000000    4820.000000   2015.000000   \n",
       "\n",
       "       yr_renovated       zipcode           lat          long  sqft_living15  \\\n",
       "count  21613.000000  21613.000000  21613.000000  21613.000000   21613.000000   \n",
       "mean      84.402258  98077.939805     47.560053   -122.213896    1986.552492   \n",
       "std      401.679240     53.505026      0.138564      0.140828     685.391304   \n",
       "min        0.000000  98001.000000     47.155900   -122.519000     399.000000   \n",
       "25%        0.000000  98033.000000     47.471000   -122.328000    1490.000000   \n",
       "50%        0.000000  98065.000000     47.571800   -122.230000    1840.000000   \n",
       "75%        0.000000  98118.000000     47.678000   -122.125000    2360.000000   \n",
       "max     2015.000000  98199.000000     47.777600   -121.315000    6210.000000   \n",
       "\n",
       "          sqft_lot15  \n",
       "count   21613.000000  \n",
       "mean    12768.455652  \n",
       "std     27304.179631  \n",
       "min       651.000000  \n",
       "25%      5100.000000  \n",
       "50%      7620.000000  \n",
       "75%     10083.000000  \n",
       "max    871200.000000  \n",
       "\n",
       "[8 rows x 21 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 2: Data Wrangling\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2\n",
    "\n",
    "Drop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21600.000000</td>\n",
       "      <td>21603.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>2.161300e+04</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "      <td>21613.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.400881e+05</td>\n",
       "      <td>3.372870</td>\n",
       "      <td>2.115736</td>\n",
       "      <td>2079.899736</td>\n",
       "      <td>1.510697e+04</td>\n",
       "      <td>1.494309</td>\n",
       "      <td>0.007542</td>\n",
       "      <td>0.234303</td>\n",
       "      <td>3.409430</td>\n",
       "      <td>7.656873</td>\n",
       "      <td>1788.390691</td>\n",
       "      <td>291.509045</td>\n",
       "      <td>1971.005136</td>\n",
       "      <td>84.402258</td>\n",
       "      <td>98077.939805</td>\n",
       "      <td>47.560053</td>\n",
       "      <td>-122.213896</td>\n",
       "      <td>1986.552492</td>\n",
       "      <td>12768.455652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.671272e+05</td>\n",
       "      <td>0.926657</td>\n",
       "      <td>0.768996</td>\n",
       "      <td>918.440897</td>\n",
       "      <td>4.142051e+04</td>\n",
       "      <td>0.539989</td>\n",
       "      <td>0.086517</td>\n",
       "      <td>0.766318</td>\n",
       "      <td>0.650743</td>\n",
       "      <td>1.175459</td>\n",
       "      <td>828.090978</td>\n",
       "      <td>442.575043</td>\n",
       "      <td>29.373411</td>\n",
       "      <td>401.679240</td>\n",
       "      <td>53.505026</td>\n",
       "      <td>0.138564</td>\n",
       "      <td>0.140828</td>\n",
       "      <td>685.391304</td>\n",
       "      <td>27304.179631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.500000e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>5.200000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>47.155900</td>\n",
       "      <td>-122.519000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>651.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.219500e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>1427.000000</td>\n",
       "      <td>5.040000e+03</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1190.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1951.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98033.000000</td>\n",
       "      <td>47.471000</td>\n",
       "      <td>-122.328000</td>\n",
       "      <td>1490.000000</td>\n",
       "      <td>5100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.500000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>1910.000000</td>\n",
       "      <td>7.618000e+03</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1560.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1975.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98065.000000</td>\n",
       "      <td>47.571800</td>\n",
       "      <td>-122.230000</td>\n",
       "      <td>1840.000000</td>\n",
       "      <td>7620.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.450000e+05</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2550.000000</td>\n",
       "      <td>1.068800e+04</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2210.000000</td>\n",
       "      <td>560.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98118.000000</td>\n",
       "      <td>47.678000</td>\n",
       "      <td>-122.125000</td>\n",
       "      <td>2360.000000</td>\n",
       "      <td>10083.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.700000e+06</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>13540.000000</td>\n",
       "      <td>1.651359e+06</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>9410.000000</td>\n",
       "      <td>4820.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>98199.000000</td>\n",
       "      <td>47.777600</td>\n",
       "      <td>-121.315000</td>\n",
       "      <td>6210.000000</td>\n",
       "      <td>871200.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\n",
       "count  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \n",
       "mean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \n",
       "std    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \n",
       "min    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n",
       "25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n",
       "50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n",
       "75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \n",
       "max    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n",
       "\n",
       "             floors    waterfront          view     condition         grade  \\\n",
       "count  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean       1.494309      0.007542      0.234303      3.409430      7.656873   \n",
       "std        0.539989      0.086517      0.766318      0.650743      1.175459   \n",
       "min        1.000000      0.000000      0.000000      1.000000      1.000000   \n",
       "25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n",
       "50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n",
       "75%        2.000000      0.000000      0.000000      4.000000      8.000000   \n",
       "max        3.500000      1.000000      4.000000      5.000000     13.000000   \n",
       "\n",
       "         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\n",
       "count  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \n",
       "mean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \n",
       "std      828.090978     442.575043     29.373411    401.679240     53.505026   \n",
       "min      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n",
       "25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n",
       "50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n",
       "75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \n",
       "max     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n",
       "\n",
       "                lat          long  sqft_living15     sqft_lot15  \n",
       "count  21613.000000  21613.000000   21613.000000   21613.000000  \n",
       "mean      47.560053   -122.213896    1986.552492   12768.455652  \n",
       "std        0.138564      0.140828     685.391304   27304.179631  \n",
       "min       47.155900   -122.519000     399.000000     651.000000  \n",
       "25%       47.471000   -122.328000    1490.000000    5100.000000  \n",
       "50%       47.571800   -122.230000    1840.000000    7620.000000  \n",
       "75%       47.678000   -122.125000    2360.000000   10083.000000  \n",
       "max       47.777600   -121.315000    6210.000000  871200.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(['id', 'Unnamed: 0'], axis= 1, inplace= True)\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of NaN values for the column bedrooms : 13\n",
      "number of NaN values for the column bathrooms : 10\n"
     ]
    }
   ],
   "source": [
    "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\n",
    "print(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean=df['bedrooms'].mean()\n",
    "df['bedrooms'].replace(np.nan,mean, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean=df['bathrooms'].mean()\n",
    "df['bathrooms'].replace(np.nan,mean, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of NaN values for the column bedrooms : 0\n",
      "number of NaN values for the column bathrooms : 0\n"
     ]
    }
   ],
   "source": [
    "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\n",
    "print(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 3: Exploratory Data Analysis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3\n",
    "\n",
    "Use the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>floors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>10680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>8241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.5</th>\n",
       "      <td>1910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.5</th>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.5</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     floors\n",
       "1.0   10680\n",
       "2.0    8241\n",
       "1.5    1910\n",
       "3.0     613\n",
       "2.5     161\n",
       "3.5       8"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "floor_count = df['floors'].value_counts().to_frame()\n",
    "floor_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4\n",
    "\n",
    "Use the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='waterfront', ylabel='price'>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='waterfront', y='price', data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5\n",
    "\n",
    "Use the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='sqft_above', ylabel='price'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x='sqft_above', y='price', data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "zipcode         -0.053203\n",
       "long             0.021626\n",
       "condition        0.036362\n",
       "yr_built         0.054012\n",
       "sqft_lot15       0.082447\n",
       "sqft_lot         0.089661\n",
       "yr_renovated     0.126434\n",
       "floors           0.256794\n",
       "waterfront       0.266369\n",
       "lat              0.307003\n",
       "bedrooms         0.308797\n",
       "sqft_basement    0.323816\n",
       "view             0.397293\n",
       "bathrooms        0.525738\n",
       "sqft_living15    0.585379\n",
       "sqft_above       0.605567\n",
       "grade            0.667434\n",
       "sqft_living      0.702035\n",
       "price            1.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['price'].sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 4: Model Development\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00046769430149007363"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[['long']]\n",
    "Y = df['price']\n",
    "lm = LinearRegression()\n",
    "lm.fit(X,Y)\n",
    "lm.score(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question  6\n",
    "\n",
    "Fit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4928532179037931"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X1 = df[['sqft_living']]\n",
    "Y1 = df[['price']]\n",
    "lm1 = LinearRegression().fit(X1, Y1)\n",
    "lm1.score(X1, Y1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 7\n",
    "\n",
    "Fit a linear regression model to predict the <code>'price'</code> using the list of features:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6576569675583581"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]\n",
    "lm2 = LinearRegression().fit(df[features], df[['price']])\n",
    "lm2.score(df[features], df[['price']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then calculate the R^2. Take a screenshot of your code.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This will help with Question 8\n",
    "\n",
    "Create a list of tuples, the first element in the tuple contains the name of the estimator:\n",
    "\n",
    "<code>'scale'</code>\n",
    "\n",
    "<code>'polynomial'</code>\n",
    "\n",
    "<code>'model'</code>\n",
    "\n",
    "The second element in the tuple  contains the model constructor\n",
    "\n",
    "<code>StandardScaler()</code>\n",
    "\n",
    "<code>PolynomialFeatures(include_bias=False)</code>\n",
    "\n",
    "<code>LinearRegression()</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 8\n",
    "\n",
    "Use the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7513417707683823"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe = Pipeline(Input)\n",
    "pipe.fit(df[features], df[['price']])\n",
    "pipe.score(df[features], df[['price']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Module 5: Model Evaluation and Refinement\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import the necessary modules:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will split the data into training and testing sets:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of test samples: 3242\n",
      "number of training samples: 18371\n"
     ]
    }
   ],
   "source": [
    "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \n",
    "X = df[features]\n",
    "Y = df['price']\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n",
    "\n",
    "\n",
    "print(\"number of test samples:\", x_test.shape[0])\n",
    "print(\"number of training samples:\",x_train.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 9\n",
    "\n",
    "Create and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6478759163939113"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RR = Ridge(alpha=0.1).fit(x_train, y_train)\n",
    "RR.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 10\n",
    "\n",
    "Perform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7002744273468813"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "poly = PolynomialFeatures(degree=2)\n",
    "x_train_poly = poly.fit_transform(x_train)\n",
    "x_test_poly = poly.transform(x_test)\n",
    "RR1 = Ridge(alpha=0.1).fit(x_train_poly, y_train)\n",
    "RR1.score(x_test_poly, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Once you complete your notebook you will have to share it. Select the icon on the top right a marked in red in the image below, a dialogue box should open, and select the option all&nbsp;content excluding sensitive code cells.</p>\n",
    "        <p><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/share_notebook.png\" alt=\"share notebook\"  style=\"display: block; margin-left: auto; margin-right: auto;\"/></p>\n",
    "        <p></p>\n",
    "        <p>You can then share the notebook&nbsp; via a&nbsp; URL by scrolling down as shown in the following image:</p>\n",
    "        <p style=\"text-align: center;\"><img width=\"600\"  src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/url_notebook.png\" alt=\"HTML\" style=\"display: block; margin-left: auto; margin-right: auto;\" /></p>\n",
    "        <p>&nbsp;</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>About the Authors:</h2> \n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\">Michelle Carey</a>, <a href=\"www.linkedin.com/in/jiahui-mavis-zhou-a4537814a\">Mavis Zhou</a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change Log\n",
    "\n",
    "| Date (YYYY-MM-DD) | Version | Changed By      | Change Description                           |\n",
    "| ----------------- | ------- | --------------- | -------------------------------------------- |\n",
    "| 2020-12-01        | 2.2     | Aije Egwaikhide | Coverted Data describtion from text to table |\n",
    "| 2020-10-06        | 2.1     | Lakshmi Holla   | Changed markdown instruction of Question1    |\n",
    "| 2020-08-27        | 2.0     | Malika Singla   | Added lab to GitLab                          |\n",
    "\n",
    "<hr>\n",
    "\n",
    "## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
    "\n",
    "<p>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
