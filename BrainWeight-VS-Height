{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab_MST_ML",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "1lUV11JJ5tST"
      },
      "source": [
        "#Importing the required libraries \n",
        "import numpy as np \n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rrcjfne48Wpz"
      },
      "source": [
        "#Supressing the Warnings\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TuHAb16F8dc5"
      },
      "source": [
        "#Reading the CSV File and Looking into it\n",
        "df = pd.read_csv('A2.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hH2xJbUy8rLs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "96f81a76-806e-4e97-d84c-d25e8e43e0ea"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Head Size(cm^3)</th>\n",
              "      <th>Brain Weight(grams)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4512</td>\n",
              "      <td>1530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3738</td>\n",
              "      <td>1297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4261</td>\n",
              "      <td>1335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3777</td>\n",
              "      <td>1282</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4177</td>\n",
              "      <td>1590</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Head Size(cm^3)  Brain Weight(grams)\n",
              "0             4512                 1530\n",
              "1             3738                 1297\n",
              "2             4261                 1335\n",
              "3             3777                 1282\n",
              "4             4177                 1590"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tDHTryo08tCT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49ac15ec-b35d-4a65-aabe-d6d07e917b0e"
      },
      "source": [
        "#Chacking the Shape of the DataFrame df\n",
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(237, 2)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v3rBibxo8zRu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3c9b3a67-47d6-4d5f-c76b-c24bd9c5404b"
      },
      "source": [
        "#Checking if there are any NULL Values in the DataFrame\n",
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Head Size(cm^3)        0\n",
              "Brain Weight(grams)    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xyZ4QHAI85qo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "ae6834ef-e460-4fb3-9717-174179a73d85"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Head Size(cm^3)</th>\n",
              "      <th>Brain Weight(grams)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>237.000000</td>\n",
              "      <td>237.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3633.991561</td>\n",
              "      <td>1282.873418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>365.261422</td>\n",
              "      <td>120.340446</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2720.000000</td>\n",
              "      <td>955.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>3389.000000</td>\n",
              "      <td>1207.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3614.000000</td>\n",
              "      <td>1280.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3876.000000</td>\n",
              "      <td>1350.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4747.000000</td>\n",
              "      <td>1635.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Head Size(cm^3)  Brain Weight(grams)\n",
              "count       237.000000           237.000000\n",
              "mean       3633.991561          1282.873418\n",
              "std         365.261422           120.340446\n",
              "min        2720.000000           955.000000\n",
              "25%        3389.000000          1207.000000\n",
              "50%        3614.000000          1280.000000\n",
              "75%        3876.000000          1350.000000\n",
              "max        4747.000000          1635.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qCmHNScB9MD3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "outputId": "cf4ef82f-0fdc-4344-a7cb-7d49c9d1707c"
      },
      "source": [
        "#Making a Scatter Plot between the Two Variables of the Dataset\n",
        "df.plot(x='Head Size(cm^3)', y='Brain Weight(grams)', kind = 'scatter')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YxXArd5o-8aS"
      },
      "source": [
        "### **Checking for Outliers**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mjm-iPlV9hHw"
      },
      "source": [
        "#Importing Another Library\n",
        "import seaborn as sns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tSiSr5TC-iAc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "c593f6bd-ea59-4cdd-e619-39fc28b2648b"
      },
      "source": [
        "sns.boxplot(data=df,x=df['Head Size(cm^3)'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f969ae44b00>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7GaEyQ7y-n75",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "c60b49d1-64f8-4fc1-88dc-47c702772065"
      },
      "source": [
        "sns.boxplot(data=df,x=df['Brain Weight(grams)'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f969addb358>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I9VGsno8-_1j"
      },
      "source": [
        "Since, we have some outliers in the data, we will try to fix the data (Outliers) using IQR Method. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rtYj8i8g-xSy"
      },
      "source": [
        "#Fixing Outliers for Head Size(cm^3) Column\n",
        "Q1=df['Head Size(cm^3)'].quantile(0.25)\n",
        "Q3=df['Head Size(cm^3)'].quantile(0.75)\n",
        "IQR=Q3-Q1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c3eY_Mhr_T-y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3c769bac-481b-4704-e30a-6fc842172f92"
      },
      "source": [
        "print(IQR)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "487.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ziDzPEHF_dZd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "17b8bc89-e5d9-4259-c11e-5fb0ba0d855d"
      },
      "source": [
        "#Defining Lower Limit and Upper Limit According to The Formula\n",
        "lower_limit = Q1-(1.5)*IQR\n",
        "upper_limit = Q3+(1.5)*IQR\n",
        "print(lower_limit, upper_limit)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2658.5 4606.5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5iqRQ0bLAWPj"
      },
      "source": [
        "#Modifying Data According to the New Limits\n",
        "df=df[df['Head Size(cm^3)']< upper_limit]\n",
        "df=df[df['Head Size(cm^3)']> lower_limit]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8XdmtKdrBJKt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "df038ab6-6fd0-4bad-f099-4403600b8dc1"
      },
      "source": [
        "sns.boxplot(data=df,x=df['Head Size(cm^3)'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f96a5042080>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Gef3k5dBnI9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70a8c1ca-597b-4d68-edf4-2eb46a60fcd0"
      },
      "source": [
        "#Now Fixing the Outliers for Brain Weight(grams) Column\n",
        "#Continuing the Same Procedure for the other column too\n",
        "\n",
        "Q1=df['Brain Weight(grams)'].quantile(0.25)\n",
        "Q3=df['Brain Weight(grams)'].quantile(0.75)\n",
        "IQR=Q3-Q1\n",
        "print(IQR)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "143.5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hciQ5IJFB9mC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ae840c65-3022-4711-9ea4-f7809452ae68"
      },
      "source": [
        "lower_limit = Q1-(1.5)*IQR\n",
        "upper_limit = Q3+(1.5)*IQR\n",
        "print(lower_limit, upper_limit)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "991.25 1565.25\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_kQP0u00CF1I",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "0ed8bfc1-e6d0-4525-ab72-f988b651e85e"
      },
      "source": [
        "#Modifying Data According to the New Limits\n",
        "df=df[df['Brain Weight(grams)']< upper_limit]\n",
        "df=df[df['Brain Weight(grams)']> lower_limit]\n",
        "sns.boxplot(data=df,x=df['Brain Weight(grams)'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9699af5128>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CTIhRqqeCfO4"
      },
      "source": [
        "## Hence, Outliers Fixed!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mYrxYXjiI0V6"
      },
      "source": [
        "## Building a Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bbo-JRTIHeXQ"
      },
      "source": [
        "X=df.drop('Brain Weight(grams)',axis=1)\n",
        "y=df['Brain Weight(grams)']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F5DQ7YyVCUyC"
      },
      "source": [
        "#Making Train and Test Split\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 50)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SJxeKfTsHYI-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8c1f023-a9c5-451f-a193-9ed681f1505c"
      },
      "source": [
        "print(X_train.head)\n",
        "print(y_train.head)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<bound method NDFrame.head of      Head Size(cm^3)\n",
            "214             3586\n",
            "92              3662\n",
            "64              3727\n",
            "235             3352\n",
            "170             3145\n",
            "..               ...\n",
            "35              3814\n",
            "114             3383\n",
            "144             3903\n",
            "230             3685\n",
            "181             3158\n",
            "\n",
            "[161 rows x 1 columns]>\n",
            "<bound method NDFrame.head of 214    1250\n",
            "92     1230\n",
            "64     1470\n",
            "235    1170\n",
            "170    1202\n",
            "       ... \n",
            "35     1207\n",
            "114    1290\n",
            "144    1334\n",
            "230    1350\n",
            "181    1100\n",
            "Name: Brain Weight(grams), Length: 161, dtype: int64>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uU0fZs50H1wU"
      },
      "source": [
        "#Building a Linear Model\n",
        "import statsmodels.api as sm"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ZdYP_mxH8GZ"
      },
      "source": [
        "#Adding a constant to get an intercept\n",
        "X_train_sm = sm.add_constant(X_train)\n",
        "\n",
        "#Fitting the resgression line using 'OLS'\n",
        "lr = sm.OLS(y_train, X_train_sm).fit()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_LEW6otLIH6o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e1b145c-bf62-4c23-b65e-6dcaa8b70d5d"
      },
      "source": [
        "#Printing the Intercept and Slope\n",
        "lr.params"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "const              372.167524\n",
              "Head Size(cm^3)      0.249587\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yj12a237IL67",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e013ee86-557c-4ade-fa2b-741938c7c532"
      },
      "source": [
        "#Printing the Summary to look at other Parameters too\n",
        "print(lr.summary())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                             OLS Regression Results                            \n",
            "===============================================================================\n",
            "Dep. Variable:     Brain Weight(grams)   R-squared:                       0.611\n",
            "Model:                             OLS   Adj. R-squared:                  0.609\n",
            "Method:                  Least Squares   F-statistic:                     250.1\n",
            "Date:                 Thu, 29 Oct 2020   Prob (F-statistic):           1.87e-34\n",
            "Time:                         06:52:38   Log-Likelihood:                -906.99\n",
            "No. Observations:                  161   AIC:                             1818.\n",
            "Df Residuals:                      159   BIC:                             1824.\n",
            "Df Model:                            1                                         \n",
            "Covariance Type:             nonrobust                                         \n",
            "===================================================================================\n",
            "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------\n",
            "const             372.1675     57.368      6.487      0.000     258.866     485.469\n",
            "Head Size(cm^3)     0.2496      0.016     15.816      0.000       0.218       0.281\n",
            "==============================================================================\n",
            "Omnibus:                        2.823   Durbin-Watson:                   2.325\n",
            "Prob(Omnibus):                  0.244   Jarque-Bera (JB):                2.355\n",
            "Skew:                           0.238   Prob(JB):                        0.308\n",
            "Kurtosis:                       3.352   Cond. No.                     3.89e+04\n",
            "==============================================================================\n",
            "\n",
            "Warnings:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 3.89e+04. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9fZTpF_WITew",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "801671a8-92ab-4386-8dda-e46c8bc2eb96"
      },
      "source": [
        "plt.scatter(X_train, y_train)\n",
        "plt.plot(X_train, 372.167524 + 0.249587*X_train, 'r')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uh9B4enIKLuU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "ecb86776-6997-4728-e113-8f96b7d7348b"
      },
      "source": [
        "plt.scatter(X_test, y_test)\n",
        "plt.plot(X_test, 372.167524 + 0.249587 * X_test, 'r')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VrN4tIb4KiZ1"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}